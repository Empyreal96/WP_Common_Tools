using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.WindowsPhone.ImageUpdate.Tools.Common;

namespace Microsoft.WindowsPhone.Multivariant.Offline
{
	internal class RegFileWriter
	{
		private static string regFileHeader
		{
			get
			{
				string text = string.Empty;
				string[] commandLineArgs = Environment.GetCommandLineArgs();
				foreach (string text2 in commandLineArgs)
				{
					text = text + text2 + " ";
				}
				return "; Autogenerated OEM Customizations" + Environment.NewLine + "; Command Line used to generate this file:" + Environment.NewLine + ";    " + text + Environment.NewLine;
			}
		}

		private static List<RegValueInfo> RemoveDuplicates(List<RegValueInfo> values)
		{
			List<RegValueInfo> list = new List<RegValueInfo>();
			Dictionary<string, RegValueInfo> dictionary = new Dictionary<string, RegValueInfo>();
			foreach (RegValueInfo value2 in values)
			{
				if (value2.ValueName != null)
				{
					RegValueInfo value = null;
					if (dictionary.TryGetValue(value2.ValueName, out value))
					{
						dictionary.Remove(value2.ValueName);
						list.Remove(value);
					}
					dictionary.Add(value2.ValueName, value2);
					list.Add(value2);
				}
			}
			return list;
		}

		public static void Write(List<RegValueInfo> regValueInfoList, string regFilename)
		{
			List<RegValueInfo> list = new List<RegValueInfo>();
			foreach (IGrouping<string, RegValueInfo> item in from x in regValueInfoList
				group x by x.KeyName)
			{
				list.AddRange(RemoveDuplicates(item.ToList()));
			}
			RegBuilder.Build(list, regFilename, regFileHeader);
		}
	}
}
